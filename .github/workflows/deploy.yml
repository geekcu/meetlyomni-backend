name: Build and Deploy to ECS
on:
  push:
    branches: [main, main-biaojin]
  pull_request:
    branches: [main, main-biaojin]
permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest
    environment:
      name: prod
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
      ECS_SERVICE: ${{ vars.ECS_SERVICE }}
      ECS_TASK_FAMILY: ${{ vars.ECS_TASK_FAMILY }}
      ECS_CONTAINER_NAME: ${{ vars.ECS_CONTAINER_NAME }}
      AWS_OIDC_PROVIDER_ARN: ${{ vars.AWS_OIDC_PROVIDER_ARN }}
      AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
      IMAGE_TAG: ${{ github.sha }}
      SLACK_CHANNEL: C09CW7ZQZD3
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: deploy-${{ github.head_ref }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/MeetlyOmni.Api/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REPOSITORY }}:latest

      - name: Fetch current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "${ECS_TASK_FAMILY}" \
            --query 'taskDefinition' \
            --output json > task-def.json

      - name: Update image in task definition
        run: |
          jq --arg IMAGE "${ECR_REPOSITORY}:${IMAGE_TAG}" --arg CONTAINER "${ECS_CONTAINER_NAME}" '
            (.containerDefinitions[] | select(.name == $CONTAINER) | .image) |= $IMAGE
            | del(.taskDefinitionArn,
                  .revision,
                  .status,
                  .requiresAttributes,
                  .compatibilities,
                  .registeredAt,
                  .registeredBy,
                  .deregisteredAt,
                  .deregisteredBy)
          ' task-def.json > task-def-updated.json

      - name: Register new task definition
        id: register-task
        run: |
          NEW_TD_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-def-updated.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task-definition-arn=${NEW_TD_ARN}" >> "$GITHUB_OUTPUT"

      - name: Deploy new task definition
        run: |
          aws ecs update-service \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --task-definition "${{ steps.register-task.outputs.task-definition-arn }}" \
            --force-new-deployment

      - name: Notify Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ env.SLACK_CHANNEL }}
          slack-message: ":white_check_mark: Prod BE Deployment completed successfully"
        env:
          SLACK_BOT_TOKEN: ${{ vars.SLACK_BOT_TOKEN }}

      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ env.SLACK_CHANNEL }}
          slack-message: ":x: Prod BE Deployment failed"
        env:
          SLACK_BOT_TOKEN: ${{ vars.SLACK_BOT_TOKEN }}

